using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class BayesianNetwork
{
    private static Dictionary<string, Node> Nodes;

    // Structura unui nod din rețea
    public class Node
    {
        public string Name { get; set; }
        public List<string> Parents { get; set; } = new List<string>();
        public Dictionary<string, double> Probabilities { get; set; } = new Dictionary<string, double>();

        public override string ToString()
        {
            var parents = Parents.Count > 0 ? string.Join(", ", Parents) : "None";
            var probabilities = string.Join("\n", Probabilities.Select(p => $"  {p.Key} = {p.Value}"));
            return $"Node: {Name}\nParents: {parents}\nProbabilities:\n{probabilities}\n";
        }

    }

    // Citirea rețelei bayesiene dintr-un fișier text
    public static void LoadNetworkFromTextFile(string filePath)
    {
        var lines = File.ReadAllLines(filePath);
        Nodes = new Dictionary<string, Node>();

        Node currentNode = null;

        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line))
                continue;

            if (line.StartsWith("Node:"))
            {
                // Începem un nod nou
                var nodeName = line.Split(':')[1].Trim();
                currentNode = new Node { Name = nodeName };
                Nodes[nodeName] = currentNode;
            }
            else if (line.StartsWith("Parents:"))
            {
                // Setăm părinții
                var parents = line.Split(':')[1].Trim();
                currentNode.Parents = parents == "None" ? new List<string>() : parents.Split(',').Select(p => p.Trim()).ToList();
            }
            else if (line.StartsWith("Probabilities:"))
            {
                // Următoarele linii sunt probabilități
                continue;
            }
            else if (currentNode != null)
            {
                // Citim o probabilitate
                var parts = line.Split('=');
                var key = parts[0].Trim();
                var value = double.Parse(parts[1].Trim());
                currentNode.Probabilities[key] = value / 10;
            }
          
        }
    }

    // Calculul probabilității comune
    public static double JointProbability(Dictionary<string, string> evidences)
    {
        double probability = 1.0;

       
        foreach (var node in Nodes.Values)
        {
            // Folosim doar nodurile relevante: Gripa, Abces, Anorexie
            if (!evidences.ContainsKey(node.Name))
                continue;

            var parentValues = node.Parents.Select(p => evidences.ContainsKey(p) ? evidences[p] : "UNKNOWN").ToArray();
            var key = parentValues.Length > 0 ? string.Join(",", parentValues) + $":{evidences[node.Name]}" : evidences[node.Name];

            Console.WriteLine($"Cheie construită: {key}");

            if (!node.Probabilities.ContainsKey(key))
            {
                Console.WriteLine($"Eroare: cheia '{key}' nu există în tabelul de probabilități al nodului '{node.Name}'.");
                throw new KeyNotFoundException($"Cheia '{key}' lipsește pentru nodul '{node.Name}'.");
            }

            probability *= node.Probabilities[key];

        }

        return probability;
    }




    static void Main(string[] args)
    {
        Console.WriteLine("Încărcăm rețeaua bayesiană din fișierul text...");
        LoadNetworkFromTextFile("network.txt");
        foreach (var node in Nodes.Values)
        {
            Console.WriteLine(node);
        }

        Console.WriteLine("Calculăm probabilitatea marginală pentru Oboseala:");
        var evidences = new Dictionary<string, string>
        {
            { "Gripa", "Nu" },
            { "Abces", "Nu" },
            { "Anorexie", "Nu" }
        };      

        double result = JointProbability(evidences);

        Console.WriteLine("P(Oboseala = Da | Gripa = Nu, Abces = Nu, Anorexie = Nu) = " + result);

        // Exemplu: afișare detalii complete pentru fiecare nod
        Console.WriteLine("\nDetalii complete despre fiecare nod:");
        
    }
}
