using System;
using System.Collections.Generic;
using System.Linq;

class BayesianNetwork
{
    // Structura rețelei și tabelele de probabilități
    private static Dictionary<string, double> ProbabilityOfGripa = new Dictionary<string, double>
    {
        { "Da", 0.1 },
        { "Nu", 0.9 }
    };

    private static Dictionary<string, double> ProbabilityOfAbces = new Dictionary<string, double>
    {
        { "Da", 0.05 },
        { "Nu", 0.95 }
    };

    private static Dictionary<(string, string), Dictionary<string, double>> ProbabilityOfFebraGivenGripaAndAbces = new Dictionary<(string, string), Dictionary<string, double>>
    {
        { ("Da", "Da"), new Dictionary<string, double> { { "Da", 0.8 }, { "Nu", 0.2 } } },
        { ("Da", "Nu"), new Dictionary<string, double> { { "Da", 0.7 }, { "Nu", 0.3 } } },
        { ("Nu", "Da"), new Dictionary<string, double> { { "Da", 0.25 }, { "Nu", 0.75 } } },
        { ("Nu", "Nu"), new Dictionary<string, double> { { "Da", 0.05 }, { "Nu", 0.95 } } }
    };

    private static Dictionary<string, Dictionary<string, double>> ProbabilityOfObosealaGivenFebra = new Dictionary<string, Dictionary<string, double>>
    {
        { "Da", new Dictionary<string, double> { { "Da", 0.6 }, { "Nu", 0.4 } } },
        { "Nu", new Dictionary<string, double> { { "Da", 0.2 }, { "Nu", 0.8 } } }
    };

    private static Dictionary<string, Dictionary<string, double>> ProbabilityOfAnorexieGivenFebra = new Dictionary<string, Dictionary<string, double>>
    {
        { "Da", new Dictionary<string, double> { { "Da", 0.5 }, { "Nu", 0.5 } } },
        { "Nu", new Dictionary<string, double> { { "Da", 0.1 }, { "Nu", 0.9 } } }
    };

    // Calculăm probabilitatea comună P(Gripa, Abces, Febra, Oboseala, Anorexie)
    public static double JointProbability(string gripa, string abces, string febra, string oboseala, string anorexie)
    {
        double pGripa = ProbabilityOfGripa[gripa];
        double pAbces = ProbabilityOfAbces[abces];
        double pFebraGivenGripaAndAbces = ProbabilityOfFebraGivenGripaAndAbces[(gripa, abces)][febra];
        double pObosealaGivenFebra = ProbabilityOfObosealaGivenFebra[febra][oboseala];
        double pAnorexieGivenFebra = ProbabilityOfAnorexieGivenFebra[febra][anorexie];

        return pGripa * pAbces * pFebraGivenGripaAndAbces * pObosealaGivenFebra * pAnorexieGivenFebra;
    }

    // Calculăm probabilitatea marginală pentru o variabilă interogată
    public static double MarginalProbability(string queryVariable, string queryValue, Dictionary<string, string> evidences)
    {
        // Variabilele din rețea
        var variables = new List<string> { "Gripa", "Abces", "Febra", "Oboseala", "Anorexie" };

        // Generăm toate combinațiile posibile pentru variabilele necunoscute
        var unknownVariables = variables.Except(evidences.Keys.Append(queryVariable)).ToList();
        var combinations = GenerateCombinations(unknownVariables);

        double totalProbability = 0.0;
        foreach (var combination in combinations)
        {
            // Combinăm evidențele, query-ul și valorile generate
            var fullState = new Dictionary<string, string>(evidences)
            {
                [queryVariable] = queryValue
            };
            foreach (var kvp in combination)
            {
                fullState[kvp.Key] = kvp.Value;
            }

            // Calculăm probabilitatea comună
            double jointProbability = JointProbability(
                fullState["Gripa"],
                fullState["Abces"],
                fullState["Febra"],
                fullState["Oboseala"],
                fullState["Anorexie"]
            );
            totalProbability += jointProbability;
        }

        return totalProbability;
    }

    // Generăm toate combinațiile posibile pentru variabilele necunoscute
    private static List<Dictionary<string, string>> GenerateCombinations(List<string> variables)
    {
        var values = new[] { "Da", "Nu" };
        var combinations = new List<Dictionary<string, string>>();

        int totalCombinations = (int)Math.Pow(2, variables.Count);
        for (int i = 0; i < totalCombinations; i++)
        {
            var combination = new Dictionary<string, string>();
            for (int j = 0; j < variables.Count; j++)
            {
                combination[variables[j]] = values[(i >> j) & 1];
            }
            combinations.Add(combination);
        }

        return combinations;
    }

    static void Main(string[] args)
    {
        Console.WriteLine("Probabilitatea ca o persoană să fie obosită dacă nu are gripă, nu are abces și nu are anorexie:");

        var evidences = new Dictionary<string, string>
        {
            { "Gripa", "Nu" },
            { "Abces", "Nu" },
            { "Anorexie", "Nu" }
        };

        double result = MarginalProbability("Oboseala", "Da", evidences);
        Console.WriteLine("P(Oboseala = Da | Gripa = Nu, Abces = Nu, Anorexie = Nu) = " + result);
    }
}
